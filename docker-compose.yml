version: '3.8'

services:
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=celebra_capital
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/celebra_capital
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - DEBUG=0
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             daphne -b 0.0.0.0 -p 8000 celebra_capital.asgi:application"

  celery_worker:
    build: ./backend
    restart: always
    depends_on:
      - redis
      - backend
    volumes:
      - ./backend:/app
      - media_volume:/app/media
      - logs_volume:/app/logs
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/celebra_capital
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    command: celery -A celebra_capital worker -l info -Q default,ocr,documents --concurrency=2

  celery_beat:
    build: ./backend
    restart: always
    depends_on:
      - redis
      - backend
    volumes:
      - ./backend:/app
      - logs_volume:/app/logs
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/celebra_capital
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    command: celery -A celebra_capital beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler

  flower:
    build: ./backend
    restart: always
    ports:
      - '5555:5555'
    depends_on:
      - redis
      - celery_worker
    volumes:
      - ./backend:/app
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/celebra_capital
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    command: celery -A celebra_capital flower

  frontend:
    build: ./frontend
    restart: always
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=${API_URL}

  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/usr/share/nginx/static
      - media_volume:/usr/share/nginx/media
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    depends_on:
      - backend
      - frontend

  redis:
    image: redis:alpine
    restart: always
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  static_volume:
  media_volume:
  logs_volume:
  redis_data:
